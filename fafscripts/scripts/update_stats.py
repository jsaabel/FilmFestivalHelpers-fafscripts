from fafscripts.modules import eventive as e, notion_new as n
from fafscripts.models import PassBucket
from fafscripts.scripts import dba_film, dba_event, dba_guest
import datetime
from dateutil import parser
import logging


def main():

    logger = logging.getLogger(__name__)
    logger.info('Generating stats.')

    stats = gather_stats()

    # write to notion (new page in stats db)
    stat_page_id = n.create_new_page_in_db(db_name='stats')
    stat_page = n.Page(id=stat_page_id)
    stat_page.set('passes', stats['passes_sold'])
    stat_page.set('words-in-texts', stats['words_in_database'])
    stat_page.set('confirmed-guests', stats['confirmed_guests'])
    stat_page.set('hotel-nights', stats['hotel_nights'])
    stat_page.set('films-on-eventive', stats['films_on_eventive'])
    stat_page.set('films-uploaded', stats['films_uploaded'])
    stat_page.set('films-downloaded', stats['films_downloaded'])
    stat_page.set('dcps-tested', stats['dcps_tested'])
    stat_page.set('trips-booked', stats['trips_booked'])
    stat_page.set('guests-on-wordpress', stats['guests_on_wordpress'])
    stat_page.set('events-planned', stats['events_planned'])
    stat_page.set('events-on-eventive', stats['events_on_eventive'])
    stat_page.set('events-on-wordpress', stats['events_on_wordpress'])
    stat_page.set('issues-in-dbs', stats['warnings_errors_in_dbs'])

    stat_page.set('name', '(generated by fafscripts)')

    stat_page.set('timestamp', [datetime.datetime.now(), None])

    stat_page.write()


def gather_stats() -> dict:
    # EVENTIVE STATS

    stats = {
        "words_in_database": 0,
        "films_on_eventive": 0,
        "films_downloaded": 0,
        "dcps_tested": 0,
        "confirmed_guests": 0,
        "passes_sold": 0,
        "confirmed_guests": 0,
        "trips_booked": 0,
        "hotel_nights": 0,
        "films_uploaded": 0,
        "guests_on_wordpress": 0,
        "events_planned": 0,
        "events_on_eventive": 0,
        "events_on_wordpress": 0,
        "warnings_errors_in_dbs": 0,
    }

    # passes
    pass_buckets = PassBucket.query.all()
    for pass_bucket in pass_buckets:
        pass_bucket_id = pass_bucket.eventive_id
        passes = e.get_passes(pass_bucket_id)
        stats['passes_sold'] += len(passes['passes'])

    # film database
    film_db = n.get_db('films')
    for film_json in film_db['results']:

        film = n.Page(json_obj=film_json)
        results_dict_film = dba_film.analyze_film(film)
        stats['warnings_errors_in_dbs'] += (
            len(results_dict_film['errors']) + len(results_dict_film['warnings']))

        synopsis = film.get_text('synopsis')
        if synopsis:
            stats['words_in_database'] += len(synopsis.split())

        bio = film.get_text('bio')
        if bio:
            stats['words_in_database'] += len(bio.split())

        eventive_link = film.get_text('eventive-link')
        if eventive_link:
            stats['films_on_eventive'] += 1

        file_status = film.get_text('file-status')
        if file_status and file_status == 'uploaded':
            stats['films_uploaded'] += 1
        if file_status and file_status == 'downloaded':
            stats['films_downloaded'] += 1

        dcp_status = film.get_text('dcp-status')
        if dcp_status and dcp_status == "tested":
            stats['dcps_tested'] += 1

    # event database
    event_db = n.get_db('events')

    for event_json in event_db['results']:

        event = n.Page(json_obj=event_json)

        results_dict_event = dba_event.analyze_event(event)
        stats['warnings_errors_in_dbs'] += (
            len(results_dict_event['errors']) + len(results_dict_event['warnings']))

        text_catalogue = event.get_text('text-catalogue')
        if text_catalogue:
            stats['words_in_database'] += len(text_catalogue.split())
        text_norw = event.get_text('text-norw')
        if text_norw:
            stats['words_in_database'] += len(text_norw.split())

        time = event.get_date('time')
        if time:
            stats['events_planned'] += 1

        if event.get_text('eventive'):
            stats['events_on_eventive'] += 1
        if event.get_text('wordpress'):
            stats['events_on_wordpress'] += 1

    # ... minutes of programming

    # guest database
    guest_db = n.get_db('guests')
    for guest_json in guest_db['results']:

        guest = n.Page(json_obj=guest_json)

        results_dict_guest = dba_guest.analyze_guest(guest, event_db)
        stats['warnings_errors_in_dbs'] += (
            len(results_dict_guest['errors']) + len(results_dict_guest['warnings']))

        bio_eng = guest.get_text('bio-eng')
        if bio_eng:
            stats['words_in_database'] += len(bio_eng.split())

        bio_norw = guest.get_text('bio-norw')
        if bio_norw:
            stats['words_in_database'] += len(bio_norw.split())

        # ... guests confirmed
        status = guest.get_text('status')
        if status:
            if status == 'confirmed':
                stats['confirmed_guests'] += 1

        # ... trips
        travel_status = guest.get_text('travel-status')
        if travel_status:
            if travel_status == 'Booked':
                stats['trips_booked'] += 1

        # ... nights
        check_in = guest.get_date('checkin')
        check_out = guest.get_date('checkout')
        if check_in and check_out:
            time_delta = parser.parse(check_out[0]) - parser.parse(check_in[0])
            stats['hotel_nights'] += int(time_delta.days)

        # ... wordpress
        wordpress = guest.get_text('wordpress')
        if wordpress:
            stats['guests_on_wordpress'] += 1

    # catalog pages done

    # lines of code
    return stats


if __name__ == "__main__":
    main()
